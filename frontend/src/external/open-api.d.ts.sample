/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['auth.login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['auth.logout'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['me'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/articles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['article'];
    put?: never;
    post: operations['article.store'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/articles/{article}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['article.show'];
    put?: never;
    post: operations['article.update'];
    delete: operations['article.destroy'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** LoginRequest */
    LoginRequest: {
      /** Format: email */
      email: string;
      password: string;
    };
    /** MeResource */
    MeResource: {
      id: number;
      name: string;
      email: string;
    };
    /** PageResource */
    PageResource: {
      per: number;
      current: number;
      last: number;
      total: number;
    };
    /** ArticleResource */
    ArticleResource: {
      id: number;
      title: string;
      content: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    /** ArticleSaveRequest */
    ArticleSaveRequest: {
      title: string;
    };
    /** UserSimpleResource */
    ArticleSimpleResource: {
      id: number;
      title: string;
    };
  };
  responses: {
    /** @description Unauthenticated */
    AuthenticationException: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': {
          /** @description Error overview. */
          message: string;
        };
      };
    };
    /** @description Validation error */
    ValidationException: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': {
          /** @description Errors overview. */
          message: string;
          /** @description A detailed description of each field that failed validation. */
          errors: {
            [key: string]: string[];
          };
        };
      };
    };
    /** @description Authorization error */
    AuthorizationException: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': {
          /** @description Error overview. */
          message: string;
        };
      };
    };
    /** @description Not found */
    ModelNotFoundException: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': {
          /** @description Error overview. */
          message: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  'auth.login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginRequest'];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            loginUser: components['schemas']['MeResource'];
          };
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string[];
        };
      };
      403: components['responses']['AuthorizationException'];
      422: components['responses']['ValidationException'];
    };
  };
  'auth.logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string[];
        };
      };
      401: components['responses']['AuthenticationException'];
      403: components['responses']['AuthorizationException'];
      422: components['responses']['ValidationException'];
    };
  };
  me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            loginUser: components['schemas']['MeResource'];
          };
        };
      };
      401: components['responses']['AuthenticationException'];
    };
  };
  article: {
    parameters: {
      query?: {
        word?: string | null;
        category?: number | null;
        page?: number | null;
        par_page?: number | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            articles: components['schemas']['ArticleSimpleResource'][];
            page: components['schemas']['PageResource'];
          };
        };
      };
      401: components['responses']['AuthenticationException'];
      403: components['responses']['AuthorizationException'];
      422: components['responses']['ValidationException'];
    };
  };
  'article.store': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['ArticleSaveRequest'] & {
          title: string;
          content: string;
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            article: components['schemas']['ArticleResource'];
          };
        };
      };
      401: components['responses']['AuthenticationException'];
      403: components['responses']['AuthorizationException'];
      422: components['responses']['ValidationException'];
    };
  };
  'article.show': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The article ID */
        article: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            article: components['schemas']['ArticleResource'];
          };
        };
      };
      401: components['responses']['AuthenticationException'];
      /** @description An error */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /**
             * @description Error overview.
             * @example
             */
            message: string;
          };
        };
      };
      404: components['responses']['ModelNotFoundException'];
    };
  };
  'article.update': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The article ID */
        article: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['ArticleSaveRequest'] & {
          title: string;
          content: string;
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            article: components['schemas']['ArticleResource'];
          };
        };
      };
      401: components['responses']['AuthenticationException'];
      403: components['responses']['AuthorizationException'];
      404: components['responses']['ModelNotFoundException'];
      422: components['responses']['ValidationException'];
    };
  };
  'article.destroy': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The article ID */
        article: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string[];
        };
      };
      401: components['responses']['AuthenticationException'];
      /** @description An error */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /**
             * @description Error overview.
             * @example
             */
            message: string;
          };
        };
      };
      404: components['responses']['ModelNotFoundException'];
    };
  };
}
